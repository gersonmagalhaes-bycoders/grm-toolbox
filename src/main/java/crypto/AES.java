package sofia.toolbox.crypto;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import sofia.toolbox.util.Text;

/**
 * This class contains methods to work with cryptography AES.
 * 
 * @author Gerson Rodrigues
 * @since 1.0
 * 
 */

public class AES {

	private String message;
	private Cipher aesCipher = null;
	private SecretKey secretKey = null;

	/**
	 * Construct an AES.
	 */	

	public AES()  {
		try {
			this.aesCipher = Cipher.getInstance("AES");
		} catch (Exception e) {
			this.message = e.getLocalizedMessage();
		}
	}

	/**
	 * Construct an AES. 
	 * @param key AES key used to encrypt text. This key is set as the current key.
	 */		

	public AES(final String key)  {
		this();
		this.setKey(key);
	}	

	/**
	 * Get the message of the last AES method.
	 * @return Message.
	 */		

	public String getMessage() {
		return this.message;
	}	

	/**
	 * Get the current key used by the AES.
	 * @return Current key.
	 */			

	private SecretKey getKey() {
		return this.secretKey;
	}

	/**
	 * Set the key to be used by the AES.
	 * @param key Key.
	 */				

	public boolean setKey(String key) {
		try {
			this.secretKey = new SecretKeySpec(Text.hexToByte(key),"AES");
			return true;
		} catch (Exception e) {
			this.message = e.getLocalizedMessage();
			return false;
		}
	}

	/**
	 * Generate a random key. This method does not set the key as current.
	 * @return Key in hexadecimal.
	 */		

	public String generateKey() {
		KeyGenerator keyGen = null;

		try {
			keyGen = KeyGenerator.getInstance("AES");
			keyGen.init(128);

			return Text.byteToHex(keyGen.generateKey().getEncoded());
		} catch (Exception e) {
			this.message = e.getLocalizedMessage();
			return null;
		}

	}

	/**
	 * Decrypt a text generated by AES using a specific key (getKey()).
	 * @param text Text to be decrypted.
	 * @return Text decrypted.
	 */		

	public String decrypt(String text) {
		try {
			this.aesCipher.init(Cipher.DECRYPT_MODE, this.getKey());

			byte[] byteDataToEncrypt = Text.hexToByte(text);
			byte[] byteDecryptedText;
			byteDecryptedText = this.aesCipher.doFinal(byteDataToEncrypt);

			return new String(byteDecryptedText);

		} catch (Exception e) {
			this.message = e.getLocalizedMessage();
			return null;
		}
	}

	/**
	 * Encrypt a text generated by AES using a specific key (getKey()).
	 * @param text Text to be encrypted.
	 * @return Text encrypted.
	 */		

	public String encrypt(String text) {

		byte[] byteCipherText = null;

		try {
			this.aesCipher.init(Cipher.ENCRYPT_MODE, this.getKey());

			byte[] byteDataToEncrypt = text.getBytes();

			byteCipherText = this.aesCipher.doFinal(byteDataToEncrypt);
		} catch (Exception e) {
			this.message = e.getLocalizedMessage();
			return null;
		}

		return Text.byteToHex(byteCipherText);
	}

}
